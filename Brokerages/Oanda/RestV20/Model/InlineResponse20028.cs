/* 
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: api@oanda.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Oanda.RestV20.Model
{
    /// <summary>
    /// InlineResponse20028
    /// </summary>
    [DataContract]
    public partial class InlineResponse20028 :  IEquatable<InlineResponse20028>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20028" /> class.
        /// </summary>
        /// <param name="TakeProfitOrderCancelTransaction">The Transaction created that cancels the Trade&#39;s existing Take Profit Order..</param>
        /// <param name="TakeProfitOrderTransaction">The Transaction created that creates a new Take Profit Order for the Trade..</param>
        /// <param name="TakeProfitOrderFillTransaction">The Transaction created that immediately fills the Trade&#39;s new Take Profit Order. Only provided if the new Take Profit Order was immediately filled..</param>
        /// <param name="TakeProfitOrderCreatedCancelTransaction">The Transaction created that immediately cancels the Trade&#39;s new Take Profit Order. Only provided if the new Take Profit Order was immediately cancelled..</param>
        /// <param name="StopLossOrderCancelTransaction">The Transaction created that cancels the Trade&#39;s existing Stop Loss Order..</param>
        /// <param name="StopLossOrderTransaction">The Transaction created that creates a new Stop Loss Order for the Trade..</param>
        /// <param name="StopLossOrderFillTransaction">The Transaction created that immediately fills the Trade&#39;s new Stop Order. Only provided if the new Stop Loss Order was immediately filled..</param>
        /// <param name="StopLossOrderCreatedCancelTransaction">The Transaction created that immediately cancels the Trade&#39;s new Stop Loss Order. Only provided if the new Stop Loss Order was immediately cancelled..</param>
        /// <param name="TrailingStopLossOrderCancelTransaction">The Transaction created that cancels the Trade&#39;s existing Trailing Stop Loss Order..</param>
        /// <param name="TrailingStopLossOrderTransaction">The Transaction created that creates a new Trailing Stop Loss Order for the Trade..</param>
        /// <param name="RelatedTransactionIDs">The IDs of all Transactions that were created while satisfying the request..</param>
        /// <param name="LastTransactionID">The ID of the most recent Transaction created for the Account.</param>
        public InlineResponse20028(OrderCancelTransaction TakeProfitOrderCancelTransaction = default(OrderCancelTransaction), TakeProfitOrderTransaction TakeProfitOrderTransaction = default(TakeProfitOrderTransaction), OrderFillTransaction TakeProfitOrderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction TakeProfitOrderCreatedCancelTransaction = default(OrderCancelTransaction), OrderCancelTransaction StopLossOrderCancelTransaction = default(OrderCancelTransaction), StopLossOrderTransaction StopLossOrderTransaction = default(StopLossOrderTransaction), OrderFillTransaction StopLossOrderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction StopLossOrderCreatedCancelTransaction = default(OrderCancelTransaction), OrderCancelTransaction TrailingStopLossOrderCancelTransaction = default(OrderCancelTransaction), TrailingStopLossOrderTransaction TrailingStopLossOrderTransaction = default(TrailingStopLossOrderTransaction), List<TransactionID> RelatedTransactionIDs = default(List<TransactionID>), string LastTransactionID = default(string))
        {
            this.TakeProfitOrderCancelTransaction = TakeProfitOrderCancelTransaction;
            this.TakeProfitOrderTransaction = TakeProfitOrderTransaction;
            this.TakeProfitOrderFillTransaction = TakeProfitOrderFillTransaction;
            this.TakeProfitOrderCreatedCancelTransaction = TakeProfitOrderCreatedCancelTransaction;
            this.StopLossOrderCancelTransaction = StopLossOrderCancelTransaction;
            this.StopLossOrderTransaction = StopLossOrderTransaction;
            this.StopLossOrderFillTransaction = StopLossOrderFillTransaction;
            this.StopLossOrderCreatedCancelTransaction = StopLossOrderCreatedCancelTransaction;
            this.TrailingStopLossOrderCancelTransaction = TrailingStopLossOrderCancelTransaction;
            this.TrailingStopLossOrderTransaction = TrailingStopLossOrderTransaction;
            this.RelatedTransactionIDs = RelatedTransactionIDs;
            this.LastTransactionID = LastTransactionID;
        }
        
        /// <summary>
        /// The Transaction created that cancels the Trade&#39;s existing Take Profit Order.
        /// </summary>
        /// <value>The Transaction created that cancels the Trade&#39;s existing Take Profit Order.</value>
        [DataMember(Name="takeProfitOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction TakeProfitOrderCancelTransaction { get; set; }
        /// <summary>
        /// The Transaction created that creates a new Take Profit Order for the Trade.
        /// </summary>
        /// <value>The Transaction created that creates a new Take Profit Order for the Trade.</value>
        [DataMember(Name="takeProfitOrderTransaction", EmitDefaultValue=false)]
        public TakeProfitOrderTransaction TakeProfitOrderTransaction { get; set; }
        /// <summary>
        /// The Transaction created that immediately fills the Trade&#39;s new Take Profit Order. Only provided if the new Take Profit Order was immediately filled.
        /// </summary>
        /// <value>The Transaction created that immediately fills the Trade&#39;s new Take Profit Order. Only provided if the new Take Profit Order was immediately filled.</value>
        [DataMember(Name="takeProfitOrderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction TakeProfitOrderFillTransaction { get; set; }
        /// <summary>
        /// The Transaction created that immediately cancels the Trade&#39;s new Take Profit Order. Only provided if the new Take Profit Order was immediately cancelled.
        /// </summary>
        /// <value>The Transaction created that immediately cancels the Trade&#39;s new Take Profit Order. Only provided if the new Take Profit Order was immediately cancelled.</value>
        [DataMember(Name="takeProfitOrderCreatedCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction TakeProfitOrderCreatedCancelTransaction { get; set; }
        /// <summary>
        /// The Transaction created that cancels the Trade&#39;s existing Stop Loss Order.
        /// </summary>
        /// <value>The Transaction created that cancels the Trade&#39;s existing Stop Loss Order.</value>
        [DataMember(Name="stopLossOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction StopLossOrderCancelTransaction { get; set; }
        /// <summary>
        /// The Transaction created that creates a new Stop Loss Order for the Trade.
        /// </summary>
        /// <value>The Transaction created that creates a new Stop Loss Order for the Trade.</value>
        [DataMember(Name="stopLossOrderTransaction", EmitDefaultValue=false)]
        public StopLossOrderTransaction StopLossOrderTransaction { get; set; }
        /// <summary>
        /// The Transaction created that immediately fills the Trade&#39;s new Stop Order. Only provided if the new Stop Loss Order was immediately filled.
        /// </summary>
        /// <value>The Transaction created that immediately fills the Trade&#39;s new Stop Order. Only provided if the new Stop Loss Order was immediately filled.</value>
        [DataMember(Name="stopLossOrderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction StopLossOrderFillTransaction { get; set; }
        /// <summary>
        /// The Transaction created that immediately cancels the Trade&#39;s new Stop Loss Order. Only provided if the new Stop Loss Order was immediately cancelled.
        /// </summary>
        /// <value>The Transaction created that immediately cancels the Trade&#39;s new Stop Loss Order. Only provided if the new Stop Loss Order was immediately cancelled.</value>
        [DataMember(Name="stopLossOrderCreatedCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction StopLossOrderCreatedCancelTransaction { get; set; }
        /// <summary>
        /// The Transaction created that cancels the Trade&#39;s existing Trailing Stop Loss Order.
        /// </summary>
        /// <value>The Transaction created that cancels the Trade&#39;s existing Trailing Stop Loss Order.</value>
        [DataMember(Name="trailingStopLossOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction TrailingStopLossOrderCancelTransaction { get; set; }
        /// <summary>
        /// The Transaction created that creates a new Trailing Stop Loss Order for the Trade.
        /// </summary>
        /// <value>The Transaction created that creates a new Trailing Stop Loss Order for the Trade.</value>
        [DataMember(Name="trailingStopLossOrderTransaction", EmitDefaultValue=false)]
        public TrailingStopLossOrderTransaction TrailingStopLossOrderTransaction { get; set; }
        /// <summary>
        /// The IDs of all Transactions that were created while satisfying the request.
        /// </summary>
        /// <value>The IDs of all Transactions that were created while satisfying the request.</value>
        [DataMember(Name="relatedTransactionIDs", EmitDefaultValue=false)]
        public List<TransactionID> RelatedTransactionIDs { get; set; }
        /// <summary>
        /// The ID of the most recent Transaction created for the Account
        /// </summary>
        /// <value>The ID of the most recent Transaction created for the Account</value>
        [DataMember(Name="lastTransactionID", EmitDefaultValue=false)]
        public string LastTransactionID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20028 {\n");
            sb.Append("  TakeProfitOrderCancelTransaction: ").Append(TakeProfitOrderCancelTransaction).Append("\n");
            sb.Append("  TakeProfitOrderTransaction: ").Append(TakeProfitOrderTransaction).Append("\n");
            sb.Append("  TakeProfitOrderFillTransaction: ").Append(TakeProfitOrderFillTransaction).Append("\n");
            sb.Append("  TakeProfitOrderCreatedCancelTransaction: ").Append(TakeProfitOrderCreatedCancelTransaction).Append("\n");
            sb.Append("  StopLossOrderCancelTransaction: ").Append(StopLossOrderCancelTransaction).Append("\n");
            sb.Append("  StopLossOrderTransaction: ").Append(StopLossOrderTransaction).Append("\n");
            sb.Append("  StopLossOrderFillTransaction: ").Append(StopLossOrderFillTransaction).Append("\n");
            sb.Append("  StopLossOrderCreatedCancelTransaction: ").Append(StopLossOrderCreatedCancelTransaction).Append("\n");
            sb.Append("  TrailingStopLossOrderCancelTransaction: ").Append(TrailingStopLossOrderCancelTransaction).Append("\n");
            sb.Append("  TrailingStopLossOrderTransaction: ").Append(TrailingStopLossOrderTransaction).Append("\n");
            sb.Append("  RelatedTransactionIDs: ").Append(RelatedTransactionIDs).Append("\n");
            sb.Append("  LastTransactionID: ").Append(LastTransactionID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse20028);
        }

        /// <summary>
        /// Returns true if InlineResponse20028 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20028 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20028 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TakeProfitOrderCancelTransaction == other.TakeProfitOrderCancelTransaction ||
                    this.TakeProfitOrderCancelTransaction != null &&
                    this.TakeProfitOrderCancelTransaction.Equals(other.TakeProfitOrderCancelTransaction)
                ) && 
                (
                    this.TakeProfitOrderTransaction == other.TakeProfitOrderTransaction ||
                    this.TakeProfitOrderTransaction != null &&
                    this.TakeProfitOrderTransaction.Equals(other.TakeProfitOrderTransaction)
                ) && 
                (
                    this.TakeProfitOrderFillTransaction == other.TakeProfitOrderFillTransaction ||
                    this.TakeProfitOrderFillTransaction != null &&
                    this.TakeProfitOrderFillTransaction.Equals(other.TakeProfitOrderFillTransaction)
                ) && 
                (
                    this.TakeProfitOrderCreatedCancelTransaction == other.TakeProfitOrderCreatedCancelTransaction ||
                    this.TakeProfitOrderCreatedCancelTransaction != null &&
                    this.TakeProfitOrderCreatedCancelTransaction.Equals(other.TakeProfitOrderCreatedCancelTransaction)
                ) && 
                (
                    this.StopLossOrderCancelTransaction == other.StopLossOrderCancelTransaction ||
                    this.StopLossOrderCancelTransaction != null &&
                    this.StopLossOrderCancelTransaction.Equals(other.StopLossOrderCancelTransaction)
                ) && 
                (
                    this.StopLossOrderTransaction == other.StopLossOrderTransaction ||
                    this.StopLossOrderTransaction != null &&
                    this.StopLossOrderTransaction.Equals(other.StopLossOrderTransaction)
                ) && 
                (
                    this.StopLossOrderFillTransaction == other.StopLossOrderFillTransaction ||
                    this.StopLossOrderFillTransaction != null &&
                    this.StopLossOrderFillTransaction.Equals(other.StopLossOrderFillTransaction)
                ) && 
                (
                    this.StopLossOrderCreatedCancelTransaction == other.StopLossOrderCreatedCancelTransaction ||
                    this.StopLossOrderCreatedCancelTransaction != null &&
                    this.StopLossOrderCreatedCancelTransaction.Equals(other.StopLossOrderCreatedCancelTransaction)
                ) && 
                (
                    this.TrailingStopLossOrderCancelTransaction == other.TrailingStopLossOrderCancelTransaction ||
                    this.TrailingStopLossOrderCancelTransaction != null &&
                    this.TrailingStopLossOrderCancelTransaction.Equals(other.TrailingStopLossOrderCancelTransaction)
                ) && 
                (
                    this.TrailingStopLossOrderTransaction == other.TrailingStopLossOrderTransaction ||
                    this.TrailingStopLossOrderTransaction != null &&
                    this.TrailingStopLossOrderTransaction.Equals(other.TrailingStopLossOrderTransaction)
                ) && 
                (
                    this.RelatedTransactionIDs == other.RelatedTransactionIDs ||
                    this.RelatedTransactionIDs != null &&
                    this.RelatedTransactionIDs.SequenceEqual(other.RelatedTransactionIDs)
                ) && 
                (
                    this.LastTransactionID == other.LastTransactionID ||
                    this.LastTransactionID != null &&
                    this.LastTransactionID.Equals(other.LastTransactionID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TakeProfitOrderCancelTransaction != null)
                    hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();
                if (this.TakeProfitOrderTransaction != null)
                    hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();
                if (this.TakeProfitOrderFillTransaction != null)
                    hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();
                if (this.TakeProfitOrderCreatedCancelTransaction != null)
                    hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();
                if (this.StopLossOrderCancelTransaction != null)
                    hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();
                if (this.StopLossOrderTransaction != null)
                    hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();
                if (this.StopLossOrderFillTransaction != null)
                    hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();
                if (this.StopLossOrderCreatedCancelTransaction != null)
                    hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();
                if (this.TrailingStopLossOrderCancelTransaction != null)
                    hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();
                if (this.TrailingStopLossOrderTransaction != null)
                    hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();
                if (this.RelatedTransactionIDs != null)
                    hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
                if (this.LastTransactionID != null)
                    hash = hash * 59 + this.LastTransactionID.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
