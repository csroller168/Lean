/* 
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: api@oanda.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Oanda.RestV20.Model
{
    /// <summary>
    /// SetTradeClientExtensionsBody
    /// </summary>
    [DataContract]
    public partial class SetTradeClientExtensionsBody :  IEquatable<SetTradeClientExtensionsBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTradeClientExtensionsBody" /> class.
        /// </summary>
        /// <param name="ClientExtensions">The Client Extensions to update the Trade with. Do not add, update, or delete the Client Extensions if your account is associated with MT4..</param>
        public SetTradeClientExtensionsBody(ClientExtensions ClientExtensions = default(ClientExtensions))
        {
            this.ClientExtensions = ClientExtensions;
        }
        
        /// <summary>
        /// The Client Extensions to update the Trade with. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <value>The Client Extensions to update the Trade with. Do not add, update, or delete the Client Extensions if your account is associated with MT4.</value>
        [DataMember(Name="clientExtensions", EmitDefaultValue=false)]
        public ClientExtensions ClientExtensions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetTradeClientExtensionsBody {\n");
            sb.Append("  ClientExtensions: ").Append(ClientExtensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SetTradeClientExtensionsBody);
        }

        /// <summary>
        /// Returns true if SetTradeClientExtensionsBody instances are equal
        /// </summary>
        /// <param name="other">Instance of SetTradeClientExtensionsBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetTradeClientExtensionsBody other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientExtensions == other.ClientExtensions ||
                    this.ClientExtensions != null &&
                    this.ClientExtensions.Equals(other.ClientExtensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientExtensions != null)
                    hash = hash * 59 + this.ClientExtensions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
