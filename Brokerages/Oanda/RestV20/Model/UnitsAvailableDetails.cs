/* 
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: api@oanda.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Oanda.RestV20.Model
{
    /// <summary>
    /// Representation of how many units of an Instrument are available to be traded by an Order depending on its postionFill option.
    /// </summary>
    [DataContract]
    public partial class UnitsAvailableDetails :  IEquatable<UnitsAvailableDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitsAvailableDetails" /> class.
        /// </summary>
        /// <param name="_Default">The number of units that are available to be traded using an Order with a positionFill option of \&quot;DEFAULT\&quot;. For an Account with hedging enabled, this value will be the same as the \&quot;OPEN_ONLY\&quot; value. For an Account without hedging enabled, this value will be the same as the \&quot;REDUCE_FIRST\&quot; value..</param>
        /// <param name="ReduceFirst">The number of units that may are available to be traded with an Order with a positionFill option of \&quot;REDUCE_FIRST\&quot;..</param>
        /// <param name="ReduceOnly">The number of units that may are available to be traded with an Order with a positionFill option of \&quot;REDUCE_ONLY\&quot;..</param>
        /// <param name="OpenOnly">The number of units that may are available to be traded with an Order with a positionFill option of \&quot;OPEN_ONLY\&quot;..</param>
        public UnitsAvailableDetails(string _Default = default(string), string ReduceFirst = default(string), string ReduceOnly = default(string), string OpenOnly = default(string))
        {
            this._Default = _Default;
            this.ReduceFirst = ReduceFirst;
            this.ReduceOnly = ReduceOnly;
            this.OpenOnly = OpenOnly;
        }
        
        /// <summary>
        /// The number of units that are available to be traded using an Order with a positionFill option of \&quot;DEFAULT\&quot;. For an Account with hedging enabled, this value will be the same as the \&quot;OPEN_ONLY\&quot; value. For an Account without hedging enabled, this value will be the same as the \&quot;REDUCE_FIRST\&quot; value.
        /// </summary>
        /// <value>The number of units that are available to be traded using an Order with a positionFill option of \&quot;DEFAULT\&quot;. For an Account with hedging enabled, this value will be the same as the \&quot;OPEN_ONLY\&quot; value. For an Account without hedging enabled, this value will be the same as the \&quot;REDUCE_FIRST\&quot; value.</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string _Default { get; set; }
        /// <summary>
        /// The number of units that may are available to be traded with an Order with a positionFill option of \&quot;REDUCE_FIRST\&quot;.
        /// </summary>
        /// <value>The number of units that may are available to be traded with an Order with a positionFill option of \&quot;REDUCE_FIRST\&quot;.</value>
        [DataMember(Name="reduceFirst", EmitDefaultValue=false)]
        public string ReduceFirst { get; set; }
        /// <summary>
        /// The number of units that may are available to be traded with an Order with a positionFill option of \&quot;REDUCE_ONLY\&quot;.
        /// </summary>
        /// <value>The number of units that may are available to be traded with an Order with a positionFill option of \&quot;REDUCE_ONLY\&quot;.</value>
        [DataMember(Name="reduceOnly", EmitDefaultValue=false)]
        public string ReduceOnly { get; set; }
        /// <summary>
        /// The number of units that may are available to be traded with an Order with a positionFill option of \&quot;OPEN_ONLY\&quot;.
        /// </summary>
        /// <value>The number of units that may are available to be traded with an Order with a positionFill option of \&quot;OPEN_ONLY\&quot;.</value>
        [DataMember(Name="openOnly", EmitDefaultValue=false)]
        public string OpenOnly { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnitsAvailableDetails {\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  ReduceFirst: ").Append(ReduceFirst).Append("\n");
            sb.Append("  ReduceOnly: ").Append(ReduceOnly).Append("\n");
            sb.Append("  OpenOnly: ").Append(OpenOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnitsAvailableDetails);
        }

        /// <summary>
        /// Returns true if UnitsAvailableDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of UnitsAvailableDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnitsAvailableDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Default == other._Default ||
                    this._Default != null &&
                    this._Default.Equals(other._Default)
                ) && 
                (
                    this.ReduceFirst == other.ReduceFirst ||
                    this.ReduceFirst != null &&
                    this.ReduceFirst.Equals(other.ReduceFirst)
                ) && 
                (
                    this.ReduceOnly == other.ReduceOnly ||
                    this.ReduceOnly != null &&
                    this.ReduceOnly.Equals(other.ReduceOnly)
                ) && 
                (
                    this.OpenOnly == other.OpenOnly ||
                    this.OpenOnly != null &&
                    this.OpenOnly.Equals(other.OpenOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Default != null)
                    hash = hash * 59 + this._Default.GetHashCode();
                if (this.ReduceFirst != null)
                    hash = hash * 59 + this.ReduceFirst.GetHashCode();
                if (this.ReduceOnly != null)
                    hash = hash * 59 + this.ReduceOnly.GetHashCode();
                if (this.OpenOnly != null)
                    hash = hash * 59 + this.OpenOnly.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
