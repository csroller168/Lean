using Newtonsoft.Json;

namespace QuantConnect.Algorithm.Framework.Alphas.Serialization
{
    /// <summary>
    /// DTO used for serializing an insight that was just generated by an algorithm.
    /// This type does not contain any of the analysis dependent fields, such as scores
    /// and estimated value
    /// </summary>
    public class SerializedInsight
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("generated-time")]
        public double GeneratedTime { get; set; }

        [JsonProperty("close-time")]
        public double CloseTime { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("ticker")]
        public string Ticker { get; set; }

        [JsonProperty("type")]
        public InsightType Type { get; set; }

        [JsonProperty("reference")]
        public decimal Reference { get; set; }

        [JsonProperty("direction")]
        public InsightDirection Direction { get; set; }

        [JsonProperty("period")]
        public double Period { get; set; }

        [JsonProperty("magnitude", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public double? Magnitude { get; set; }

        [JsonProperty("confidence", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public double? Confidence { get; set; }

        [JsonProperty("score-final", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public bool ScoreIsFinal { get; set; }

        [JsonProperty("score-magnitude", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public double ScoreMagnitude { get; set; }

        [JsonProperty("score-direction", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public double ScoreDirection { get; set; }

        [JsonProperty("estimated-value", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public decimal EstimatedValue { get; set; }

        /// <summary>
        /// Initializes a new default instance of the <see cref="SerializedInsight"/> class
        /// </summary>
        public SerializedInsight()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerializedInsight "/> class by copying the specified insight
        /// </summary>
        /// <param name="insight">The insight to copy</param>
        public SerializedInsight(Insight insight)
        {
            Id = insight.Id.ToString("N");
            GeneratedTime = Time.DateTimeToUnixTimeStamp(insight.GeneratedTimeUtc);
            CloseTime = Time.DateTimeToUnixTimeStamp(insight.CloseTimeUtc);
            Symbol = insight.Symbol.ID.ToString();
            Ticker = insight.Symbol.Value;
            Type = insight.Type;
            Reference = insight.ReferenceValue;
            Direction = insight.Direction;
            Period = insight.Period.TotalSeconds;
            Magnitude = insight.Magnitude;
            Confidence = insight.Confidence;
            ScoreIsFinal = insight.Score.IsFinalScore;
            ScoreMagnitude = insight.Score.Magnitude;
            ScoreDirection = insight.Score.Direction;
            EstimatedValue = insight.EstimatedValue;
        }
    }
}