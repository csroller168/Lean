using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using QuantConnect.Configuration;

namespace QuantConnect.Data.Custom.Intrinio
{
    /// <summary>
    /// Access the massive repository of economic data from the Federal Reserve Economic Data system via the Intrinio API.
    /// </summary>
    /// <seealso cref="QuantConnect.Data.BaseData" />
    public class IntrinioEconomicData : BaseData
    {
        private readonly string _user = Config.Get("intrinio-username");
        private readonly string _password = Config.Get("intrinio-password");

        private string _baseUrl = @"https://api.intrinio.com/historical_data.csv?";
        private readonly string _item;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntrinioEconomicData"/> class.
        /// </summary>
        public IntrinioEconomicData() : this("level")
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntrinioEconomicData"/> class.
        /// </summary>
        /// <param name="item">The item.</param>
        public IntrinioEconomicData(string item) { _item = item; }


        /// <summary>
        /// Return the URL string source of the file. This will be converted to a stream
        /// </summary>
        /// <param name="config">Configuration object</param>
        /// <param name="date">Date of this source file</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>
        /// String URL of source file.
        /// </returns>
        public override SubscriptionDataSource GetSource(SubscriptionDataConfig config, DateTime date, bool isLiveMode)
        {
            var url = string.Format("{0}identifier={1}&item={2}", _baseUrl,
                                    config.Symbol.Value, _item);
            var byteKey = Encoding.ASCII.GetBytes(string.Format("{0}:{1}", _user, _password));
            var authorizationHeaders = new List<KeyValuePair<string, string>>
            {
                new KeyValuePair<string, string>("Authorization",
                                                 string.Format("Basic ({0})", Convert.ToBase64String(byteKey)))
            };

            return new SubscriptionDataSource(url, SubscriptionTransportMedium.RemoteFile, FileFormat.Csv, authorizationHeaders);
        }

        /// <summary>
        /// Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
        /// each time it is called. The returned object is assumed to be time stamped in the config.ExchangeTimeZone.
        /// </summary>
        /// <param name="config">Subscription data config setup object</param>
        /// <param name="line">Line of the source document</param>
        /// <param name="date">Date of the requested data</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>
        /// Instance of the T:BaseData object generated by this line of the CSV
        /// </returns>
        public override BaseData Reader(SubscriptionDataConfig config, string line, DateTime date, bool isLiveMode)
        {
            var obs = line.Split(',');
            if (obs.Length != 2) return null;
            var time = DateTime.ParseExact(obs[0], "yyyy-MM-dd", CultureInfo.InvariantCulture);
            var value = obs[1].ToDecimal();
            return new IntrinioEconomicData
            {
                Symbol = config.Symbol,
                Time=time,
                EndTime = time + QuantConnect.Time.OneDay,
                Value = value,
                DataType = MarketDataType.Auxiliary
            };
        }
    }
}
