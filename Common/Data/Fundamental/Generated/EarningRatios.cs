/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

//------------------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.IO;
using Newtonsoft.Json;

namespace QuantConnect.Data.Fundamental
{
	/// <summary>
	/// Definition of the EarningRatios class
	/// </summary>
	public class EarningRatios : BaseData
	{
		/// <summary>
		/// The growth in the company’s diluted earnings per share (EPS) on a percentage basis. Morningstar calculates the annualized growth
		/// percentage based on the underlying diluted EPS reported in the Income Statement within the company filings or reports.
		/// </summary>
		/// <remarks>
		/// Morningstar DataId: 13015
		/// </remarks>
		public DilutedEPSGrowth DilutedEPSGrowth { get; set; }

		/// <summary>
		/// The growth in the company’s diluted EPS from continuing operations on a percentage basis. Morningstar calculates the annualized
		/// growth percentage based on the underlying diluted EPS from continuing operations reported in the Income Statement within the
		/// company filings or reports.
		/// </summary>
		/// <remarks>
		/// Morningstar DataId: 13016
		/// </remarks>
		public DilutedContEPSGrowth DilutedContEPSGrowth { get; set; }

		/// <summary>
		/// The growth in the company’s dividends per share (DPS) on a percentage basis. Morningstar calculates the annualized growth
		/// percentage based on the underlying DPS from its dividend database.  Morningstar collects its DPS from company filings and
		/// reports, as well as from third party sources.
		/// </summary>
		/// <remarks>
		/// Morningstar DataId: 13017
		/// </remarks>
		public DPSGrowth DPSGrowth { get; set; }

		/// <summary>
		/// The growth in the company’s book value per share on a percentage basis. Morningstar calculates the annualized growth
		/// percentage based on the underlying equity and end of period shares outstanding reported in the company filings or reports.
		/// </summary>
		/// <remarks>
		/// Morningstar DataId: 13018
		/// </remarks>
		public EquityPerShareGrowth EquityPerShareGrowth { get; set; }

		/// <summary>
		/// The five-year growth rate of dividends per share, calculated using regression analysis.
		/// </summary>
		/// <remarks>
		/// Morningstar DataId: 13019
		/// </remarks>
		public RegressionGrowthofDividends5Years RegressionGrowthofDividends5Years { get; set; }

		/// <summary>
		/// Creates an instance of the EarningRatios class
		/// </summary>
		public EarningRatios()
		{
			DilutedEPSGrowth = new DilutedEPSGrowth();
			DilutedContEPSGrowth = new DilutedContEPSGrowth();
			DPSGrowth = new DPSGrowth();
			EquityPerShareGrowth = new EquityPerShareGrowth();
			RegressionGrowthofDividends5Years = new RegressionGrowthofDividends5Years();
		}

		/// <summary>
		/// Sets values for non existing periods from a previous instance
		/// </summary>
		/// <remarks>Used to fill-forward values from previous dates</remarks>
		/// <param name="previous">The previous instance</param>
		public void UpdateValues(EarningRatios previous)
		{
			DilutedEPSGrowth.UpdateValues(previous.DilutedEPSGrowth);
			DilutedContEPSGrowth.UpdateValues(previous.DilutedContEPSGrowth);
			DPSGrowth.UpdateValues(previous.DPSGrowth);
			EquityPerShareGrowth.UpdateValues(previous.EquityPerShareGrowth);
			RegressionGrowthofDividends5Years.UpdateValues(previous.RegressionGrowthofDividends5Years);
		}

		/// <summary>
		/// Return the URL string source of the file. This will be converted to a stream 
		/// </summary>
		public override SubscriptionDataSource GetSource(SubscriptionDataConfig config, DateTime date, bool isLiveMode)
		{
			var source =
				Path.Combine(Globals.DataFolder, "equity", config.Market, "fundamental", "fine", date.ToString("yyyyMMdd") + ".zip") +
				"#" + config.Symbol.Value + "_earning-ratios.json";

			return new SubscriptionDataSource(source, SubscriptionTransportMedium.LocalFile, FileFormat.Csv);
		}

		/// <summary>
		/// Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
		/// each time it is called. The returned object is assumed to be time stamped in the config.ExchangeTimeZone.
		/// </summary>
		public override BaseData Reader(SubscriptionDataConfig config, string line, DateTime date, bool isLiveMode)
		{
			return JsonConvert.DeserializeObject<EarningRatios>(line);
		}
	}
}
